AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  RDSUserName:
    Type: String
    Default: admin
  RDSDBName:
    Type: String
    Default: demodb2

Resources:

  # create VPC
  RDSVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: 172.32.0.0/16
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        Tags:
        - Key: Name
          Value: RDSVPC2

  # create subnets
  privateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.0.0/20
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: privateDBSubnet1

  privateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.16.0/20
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: privateDBSubnet2

  privateLambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.32.0/20
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: privateLambdaSubnet1

  privateLambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.48.0/20
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: privateLambdaSubnet2

  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.64.0/20
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: publicSubnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.80.0/20
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: publicSubnet2

  # create and attach internet gateway
  # Internet gatewat and NAT are required so that Lambdas running inside VPC can invoke ManageConnections lambda function (running out of VPC)
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myInternetGateway

  AttachInternetGateway:
    DependsOn: myInternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RDSVPC
      InternetGatewayId: !Ref myInternetGateway

  # create route tables
  CustomRouteTable:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RDSVPC
      Tags:
      - Key: Name
        Value: CustomRouteTable

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RDSVPC
      Tags:
      - Key: Name
        Value: myRouteTable
  
 # attach route tables
  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateDBSubnet1
      RouteTableId: !Ref myRouteTable

  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateDBSubnet2
      RouteTableId: !Ref myRouteTable

  mySubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateLambdaSubnet1
      RouteTableId: !Ref myRouteTable

  mySubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateLambdaSubnet2
      RouteTableId: !Ref myRouteTable

  # public subnets get attached to CustomRouteTable
  mySubnetRouteTableAssociation5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref CustomRouteTable

  mySubnetRouteTableAssociation6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref CustomRouteTable

  # create and attach NAT gateway  
  myNAT:
    DependsOn: RDSVPC
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [myEIP,AllocationId]      
      SubnetId: !Ref publicSubnet1

  myEIP:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # create routes

  RouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNAT

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CustomRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  # create security groups

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow My SQL access from lambda subnets
      VpcId:
        Ref: RDSVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId : !Ref LambdaSecurityGroup
      Tags:
      - Key: Name
        Value: RDSSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId:
        Ref: RDSVPC
      Tags:
      - Key: Name
        Value: LambdaSecurityGroup

  # Create Db subnet groups for RDS instance
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "description"
      SubnetIds: 
        - !Ref privateDBSubnet1
        - !Ref privateDBSubnet2
      Tags: 
        - 
          Key: "Name"
          Value: "myDBSubnetGroup"
  
  # create IAM roles
  # Will be assumed by Manage Connections Lambda function 
  RDSLambdaManageConnectionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AccessDDB"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "dynamodb:*"
                Resource: [!GetAtt ConnectionsCounter.Arn]
        - 
          PolicyName: "AllowMetricAdd"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "cloudwatch:PutMetricData"
                Resource: "*"
        - 
          PolicyName: "AllowS3"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
        - 
          PolicyName: "AllowSSM"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "SSM:*"
                Resource: "*"                
        - 
          PolicyName: "AllowSM"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "secretsmanager:*"
                Resource: "*"                
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        

  # Will be assumed by LambdaRDSTest and LambdaRDSTestHarness Lambda functions
  RDSLambdaTestRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AllowInvoke"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource: "*"
                  #- !GetAtt LambdaRDSManageConnections.Arn
                  #- !GetAtt LambdaRDSTest.Arn
        - 
          PolicyName: "AllowSM"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "secretsmanager:*"
                Resource: "*"                   
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Will be assumed by RDSLambdaCFNInit Lambda function
  RDSLambdaCFNInitRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AllowSM"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "secretsmanager:*"
                Resource: "*"          
        - 
          PolicyName: "AccessDDB"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "dynamodb:*"
                Resource: [!GetAtt ConnectionsCounter.Arn]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        

  ConnectionsCounter:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      AttributeDefinitions: 
        - 
          AttributeName: "RDBMSName"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "RDBMSName"
          KeyType: "HASH"       



  LambdaRDSManageConnections:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_ManageConnections.lambda_handler
      Description: "Lambda function to manage RDS connections count"
      Runtime: python3.9
      CodeUri: 's3://dsob/aws-sm-lambda-code.zip'
      #FunctionName: LambdaRDS_ManageConnections
      Role: !GetAtt RDSLambdaManageConnectionsRole.Arn
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables: 
          DDB_TABLE_NAME: !Ref ConnectionsCounter

  LambdaRDSTest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_Test_Clean.lambda_handler
      Description: "Test Lambda function to access a RDS Database and read sample data"
      Runtime: python3.9
      CodeUri: 's3://dsob/aws-sm-lambda-code.zip'
      Role: !GetAtt RDSLambdaTestRole.Arn
      MemorySize: 128
      Timeout: 60
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get      
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1  
          - !Ref privateLambdaSubnet2
      Environment:
        Variables: 
          RDS_HOST: !GetAtt MyDBInstance2.Endpoint.Address
          RDS_USERNAME: !Ref RDSUserName
          SECRET_NAME: !Ref MyRDSInstanceRotationSecret
          RDS_DB_NAME: !Ref RDSDBName
          HELPER_FUNCTION_ARN: !GetAtt LambdaRDSManageConnections.Arn
          
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "rds-api"
      Description: "My API"

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"      
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          text/html: Empty
        ResponseParameters:
          method.response.header.Content-Type: true
          method.response.header.Content-Length: true      
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "LambdaRDSTest.Arn"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: integration.response.body.headers.Content-Type
            method.response.header.Content-Length: integration.response.body.headers.Content-Length
          ResponseTemplates:
            text/html: $input.path('$')

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: "Prod"          

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaRDSTest.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"
  
  LambdaRDSCFNInit:
    DependsOn: 
      - myEIP # for deletion, this lambda function requires access to S3 bucket, hence this dependency. (chained to NAT and internet gateway)
      - mySubnetRouteTableAssociation1
      - mySubnetRouteTableAssociation2
      - mySubnetRouteTableAssociation3
      - mySubnetRouteTableAssociation4
      - mySubnetRouteTableAssociation5
      - mySubnetRouteTableAssociation6
      - RouteToInternet
      - RouteToNAT
      - RDSSecurityGroup
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_CFNInit_Clean.lambda_handler
      Description: "Lambda function which will execute when this CFN template is created, updated or deleted"
      Runtime: python3.9
      CodeUri: 's3://dsob/aws-sm-lambda-code.zip'
      Role: !GetAtt RDSLambdaCFNInitRole.Arn
      MemorySize: 128
      Timeout: 60
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1  
          - !Ref privateLambdaSubnet2
      Environment:
        Variables: 
          RDS_HOST: !GetAtt MyDBInstance2.Endpoint.Address
          RDS_USERNAME: !Ref RDSUserName
          SECRET_NAME: !Ref MyRDSInstanceRotationSecret
          RDS_DB_NAME: !Ref RDSDBName
          DDB_TABLE_NAME: !Ref ConnectionsCounter

  # Wire up the lambda function LambdaRDSCFNInit to execute on stack create, update or delete
  LambdaRDSCFnTrigger:
    Type: Custom::LambdaRDS
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaRDSCFNInit.Arn
      
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is my rds instance secret'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${!Ref RDSUserName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppNam
          Value: MyApp

  #This is a RDS instance resource. Its master username and password use dynamic references to resolve values from
  #SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value
  #We use a ref to the Secret resource logical id in order to construct the dynamic reference, since the Secret name is being
  #generated by CloudFormation
  MyDBInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      DBName: !Ref RDSDBName
      Engine: mysql
      MasterUsername: !Ref RDSUserName
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSInstanceRotationSecret, ':SecretString:password}}' ]]
      MultiAZ: False
      PubliclyAccessible: False      
      StorageType: gp2
      DBSubnetGroupName: !Ref myDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: 'rotation-instance'

  #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
  #the referenced RDS instance
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      TargetId: !Ref MyDBInstance2
      TargetType: AWS::RDS::DBInstance

  #This is a RotationSchedule resource. It configures rotation of password for the referenced secret using a rotation lambda
  #The first rotation happens at resource creation time, with subsequent rotations scheduled according to the rotation rules
  #We explicitly depend on the SecretTargetAttachment resource being created to ensure that the secret contains all the
  #information necessary for rotation to succeed
  MySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRDSInstanceAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      RotationLambdaARN: !GetAtt MyRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  #This is a lambda Function resource. We will use this lambda to rotate secrets
  #For details about rotation lambdas, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html
  #The below example assumes that the lambda code has been uploaded to a S3 bucket, and that it will rotate a mysql database password
  MyRotationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Handler: mysql_secret_rotation.lambda_handler
      Description: 'This is a lambda to rotate MySql user passwd'
      FunctionName: 'cfn-rotation-lambda'
      CodeUri: 's3://dsob/aws-sm-lambda-code.zip'      
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'

  #This is a lambda Permission resource which grants Secrets Manager permission to invoke the rotation lambda function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyRotationLambda
    Properties:
      FunctionName: 'cfn-rotation-lambda'
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com

  #This is the IAM Role resource for the rotation lambda, it grants permissions to the lambda to get and update the secret as part of the
  #rotation process. This includes required KMS permissions. It also includes permissions needed for logging to CloudWatch.
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'cfn-rotation-lambda-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AWSSecretsManagerRotationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-rotation-lambda'
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:GetRandomPassword"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:GenerateDataKey"
                Resource: "*"

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ServerlessRestApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
  databaseuser:
    Description: database use id
    Value: !Ref RDSUserName    

    